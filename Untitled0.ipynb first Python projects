{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyN3fL80MdI+xjX3an18017O",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Prisevca/fisrt-maven-project/blob/main/Untitled0.ipynb%20first%20Python%20projects\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1PCSbv4e04lR",
        "outputId": "dcb0cd7d-7f4e-4261-9e73-ad2cedb8c8fd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello World!\n",
            "Please enter some text: My name is John\n",
            "Texte entered:  My name is John\n"
          ]
        }
      ],
      "source": [
        "print ('Hello World!')\n",
        "x = input ('Please enter some text: ')\n",
        "print ('Texte entered: ', x)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 24\n",
        "print(a)\n",
        "\n",
        "b = True\n",
        "print(b)\n",
        "\n",
        "c  = 15.0\n",
        "print(c)\n",
        "\n",
        "a= \"Python is amazing!\"\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ovfjAcFG2wEx",
        "outputId": "0a7a5360-d003-44cd-814f-a940ef16bfae"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "24\n",
            "True\n",
            "15.0\n",
            "Python is amazing!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 24\n",
        "print(type(a))\n",
        "\n",
        "b = True\n",
        "print(type (b))\n",
        "\n",
        "c  = 15.0\n",
        "print(type (c))\n",
        "\n",
        "a= \"Python is amazing!\"\n",
        "print(type(a))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1-5i9zc34NTL",
        "outputId": "5969ad62-ea7c-4f16-b304-0662e2dda0e4"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'int'>\n",
            "<class 'bool'>\n",
            "<class 'float'>\n",
            "<class 'str'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 25\n",
        "b = 2\n",
        "c = 'Python '\n",
        "d = 'Limbajul de programare '\n",
        "print(a+b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DDx5ek6Z4uWB",
        "outputId": "1b75aac1-5a53-4812-941d-13b996afb5f0"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "27\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(a/b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1suT2Ma86G67",
        "outputId": "5b7b7334-8a12-40e9-b80d-991774428d88"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "12.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print (a%b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2BOf8yYv6L4h",
        "outputId": "d53ab060-3090-4cb7-8b5b-d174eae0515a"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print (b%a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SKq0pGUW6XdN",
        "outputId": "32264fb2-b3ea-486f-f7ca-b4dd32cdfd51"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print (d+c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ehtfSYY96bAP",
        "outputId": "cb182680-d6ef-4e8f-cc09-caf49bb5d52e"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Limbajul de programarePython\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print (c*a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LuuF5NBn6o2-",
        "outputId": "28864a91-b8b8-4bd6-f7ef-8a1be0d0504c"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPythonPython\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 2\n",
        "b = 10\n",
        "c = -60\n",
        "d = 10"
      ],
      "metadata": {
        "id": "lIoJc9fG6yNV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print (a == b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-g-h8GYM642v",
        "outputId": "3d2c9956-a298-4d80-8031-37a9ec9f2d33"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print (a < b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cmwA66M67AVK",
        "outputId": "a5b7220c-964c-47f1-dd7f-749f6501b59c"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print (b != d)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5c2liuGC7YGK",
        "outputId": "0bb95832-6f7a-41b9-9fa0-c58f6a4a3bcd"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_first_list = [234, 0, -23, 99]\n",
        "print(my_first_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2nHgAHqP7gTQ",
        "outputId": "80fea426-9bcb-4959-e105-f0b8323fbebd"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[234, 0, -23, 99]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(my_first_list[-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AJ7AEKA67orC",
        "outputId": "7fbf7c0d-80aa-4560-b72a-1877e7044e13"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "99\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_second_list = ['a', 'b', 'c', 'd']\n",
        "print(my_second_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YASFt7pq7_GC",
        "outputId": "b1ff2975-0ad7-49b4-a3c8-b278ebc2b0a8"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['a', 'b', 'c', 'd']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_third_list = [True, -4.5, 'e', 69, False]\n",
        "print(type(my_third_list))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pTTxdoCr8KcV",
        "outputId": "592d26be-54c2-4378-d79a-4db91b9ab95e"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'list'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_2d_list = [\n",
        "    [234, 0, -23, 99],\n",
        "    [134, 420, 64, 12],\n",
        "    [-69, 120, -5, 199]\n",
        "]"
      ],
      "metadata": {
        "id": "ubbbVHGd9Dws"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print (my_2d_list[2][1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KeatqWT29cXs",
        "outputId": "e48853d0-3d38-4b21-e5a7-c14820989416"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "120\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "text = input ('Enter a number between 1 and 100: ')\n",
        "x = int (text)\n",
        "\n",
        "if x < 1:\n",
        "  print('This number is too small')\n",
        "elif x > 100:\n",
        "    print('This number is too big')\n",
        "else:\n",
        "      print('This number is ok')\n",
        "      print('Good Job!')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LJntsT0l-Tiy",
        "outputId": "a5cf04c0-a559-4d92-fbbc-c5e8db89ce1c"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a number between 1 and 100: 99\n",
            "This number is ok\n",
            "Good Job!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "i = 0\n",
        "\n",
        "while i < 5:\n",
        "    i = i+1\n",
        "    print (i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pde5XhWLAAfT",
        "outputId": "ffee0844-73bc-4267-c65a-155a63df8680"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = [1, 1]\n",
        "text = 'How many Fibonacci numbers do you want to compute?'\n",
        "n = int (input(text))\n",
        "\n",
        "while len (a) < n:\n",
        "    new_number = a[-1]+ a[-2]\n",
        "    a.append(new_number)\n",
        "    \n",
        "print (a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wxxJuoMpAr13",
        "outputId": "c7b1f5ac-029a-416a-c8dd-d310598307ea"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "How many Fibonacci numbers do you want to compute?10\n",
            "[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "\n",
        "for number in a:\n",
        "    square = number * number\n",
        "    print (f'The square of {number} is {square}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GqRU04csCHbr",
        "outputId": "88d9251f-9a01-4698-e9a1-53fd856d8d2f"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The square of 1 is 1\n",
            "The square of 2 is 4\n",
            "The square of 3 is 9\n",
            "The square of 4 is 16\n",
            "The square of 5 is 25\n",
            "The square of 6 is 36\n",
            "The square of 7 is 49\n",
            "The square of 8 is 64\n",
            "The square of 9 is 81\n",
            "The square of 10 is 100\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def draw_triangle (n):\n",
        "    i = 1\n",
        "    while i<= n:\n",
        "        print('*' * i)\n",
        "        i = i+1"
      ],
      "metadata": {
        "id": "PkeamGJeDSLz"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "draw_triangle (10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u5wEZ9-wEc-5",
        "outputId": "48edf36f-2027-40f2-8bc4-cfd052e2d3dd"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "*\n",
            "**\n",
            "***\n",
            "****\n",
            "*****\n",
            "******\n",
            "*******\n",
            "********\n",
            "*********\n",
            "**********\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_tasks = []"
      ],
      "metadata": {
        "id": "rYBR2Q6mEwO0"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def show_tasks():\n",
        "    print('+--Your Tasks--+')\n",
        "    for index, task in enumerate(my_tasks):\n",
        "        print(f'{index}) {task}')\n",
        "    print('+-----------+')"
      ],
      "metadata": {
        "id": "1qcAvLz9IoTo"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def add_task(text):\n",
        "    my_tasks.append(text)\n",
        "    print()\n",
        "    print(f'The task \"{text}\" was added!!!')\n",
        "    print()"
      ],
      "metadata": {
        "id": "xHTcQSNrJeg4"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def remove_task(index):\n",
        "    text = my_tasks.pop(index)\n",
        "    print(f'The task\"{text}\" was removed!!!')"
      ],
      "metadata": {
        "id": "C4h-zLgPKFOc"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def menu ():\n",
        "    while True:\n",
        "        show_tasks()\n",
        "        print()\n",
        "        option = input ('Do you want to a)add, r)emove or q)uit: ')\n",
        "        if option == 'a':\n",
        "            text = input('Enter your task: ')\n",
        "            add_task(text)\n",
        "        elif option == 'r':\n",
        "            id = int(input('Enter the id of the taqsk that you want to remove'))\n",
        "            remove_task(id)\n",
        "        elif option == 'q':\n",
        "            break   \n",
        "        else: \n",
        "            print ('This is not a valid option')"
      ],
      "metadata": {
        "id": "bKaP-u4FLLww"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "menu()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KX6w8lwQMxQu",
        "outputId": "65eb5333-6acd-4b69-9938-8627e06bb54f"
      },
      "execution_count": 51,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "+--Your Tasks--+\n",
            "+-----------+\n",
            "\n",
            "Do you want to a)add, r)emove or q)uit: a\n",
            "Enter your task: Read another Python book\n",
            "\n",
            "The task \"Read another Python book\" was added!!!\n",
            "\n",
            "+--Your Tasks--+\n",
            "0) Read another Python book\n",
            "+-----------+\n",
            "\n",
            "Do you want to a)add, r)emove or q)uit: a\n",
            "Enter your task: Learn about object oriented programming\n",
            "\n",
            "The task \"Learn about object oriented programming\" was added!!!\n",
            "\n",
            "+--Your Tasks--+\n",
            "0) Read another Python book\n",
            "1) Learn about object oriented programming\n",
            "+-----------+\n",
            "\n",
            "Do you want to a)add, r)emove or q)uit: a\n",
            "Enter your task: Learn to use numpy\n",
            "\n",
            "The task \"Learn to use numpy\" was added!!!\n",
            "\n",
            "+--Your Tasks--+\n",
            "0) Read another Python book\n",
            "1) Learn about object oriented programming\n",
            "2) Learn to use numpy\n",
            "+-----------+\n",
            "\n",
            "Do you want to a)add, r)emove or q)uit: r\n",
            "Enter the id of the taqsk that you want to remove1\n",
            "The task\"Learn about object oriented programming\" was removed!!!\n",
            "+--Your Tasks--+\n",
            "0) Read another Python book\n",
            "1) Learn to use numpy\n",
            "+-----------+\n",
            "\n",
            "Do you want to a)add, r)emove or q)uit: q\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = [ 234, 'This is a string', True, False, -64, 13.2]"
      ],
      "metadata": {
        "id": "cnp-a9XuPoRr"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "choice(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dnuhe_-xQ1tY",
        "outputId": "8d488843-2f56-4778-aff6-7750c740a7b2"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "13.2"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from random import choice "
      ],
      "metadata": {
        "id": "dZ0V7wR_RCLb"
      },
      "execution_count": 79,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def print_board():\n",
        "    print ()\n",
        "    print(' {} | {} | {} '.format(board[0][0], board[0][1], board[0][2]))\n",
        "    print ('---+---+---')\n",
        "    print(' {} | {} | {} '.format(board[1][0], board[1][1], board[1][2]))\n",
        "    print ('---+---+---')\n",
        "    print(' {} | {} | {} '.format(board[2][0], board[2][1], board[2][2]))\n",
        "    print()"
      ],
      "metadata": {
        "id": "FyzEWWBmRJ4N"
      },
      "execution_count": 80,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def check_state():\n",
        "    #check horizontally\n",
        "    if board[0][0]==board[0][1]==board [0][2] and board [0][0] !=' ':\n",
        "        return f'{board[0][0]} won!'\n",
        "    elif board[1][0]==board[1][1]==board [1][2] and board [1][0] !=' ':\n",
        "        return f'{board[1][0]} won!'\n",
        "    elif board[2][0]==board[2][1]==board[2][2] and board[2][0] !=' ':\n",
        "        return f'{board[2][0]} won!'\n",
        "    #check vertically\n",
        "    elif board[0][0]==board[1][0]==board[2][0] and board[0][0] !=' ':\n",
        "        return f'{board[0][0]} won!'\n",
        "    elif board[0][1]==board[1][1]==board[2][1] and board[0][1] !=' ':\n",
        "        return f'{board[0][1]} won!'\n",
        "    elif board[0][2]==board[1][2]==board[2][2] and board[0][2] !=' ':\n",
        "        return f'{board[0][2]} won!'\n",
        "    #check diagonally\n",
        "    elif board[0][0]==board[1][2]==board[2][2] and board[0][0] !=' ':\n",
        "        return f'{board[0][2]} won!'\n",
        "    elif board[2][0]==board[1][1]==board[0][2] and board[2][0] !=' ':\n",
        "         return f'{board[2][0]} won!'\n",
        "    #check for draw\n",
        "    elif(\n",
        "    board[0][0]!=' 'and board[0][1]!=' ' and board[0][2]!=' 'and\n",
        "    board[1][0]!=' 'and board[1][1]!=' ' and board[1][2]!=' 'and\n",
        "    board[2][0]!=' 'and board[2][1]!=' ' and board[1][2]!=' '\n",
        "    ):\n",
        "        return 'Draw'\n",
        "    else:\n",
        "        return 'Running'\n"
      ],
      "metadata": {
        "id": "W7eGv4AqSvmw"
      },
      "execution_count": 95,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_row_and_col(available_moves, computer):\n",
        "    if computer:\n",
        "        move = choice(available_moves)\n",
        "    else:\n",
        "        while True:\n",
        "            move = int(input(f'Choose a move from {available_moves}: '))\n",
        "            if move in available_moves:\n",
        "                break\n",
        "            else:\n",
        "                print('That move is not available')\n",
        "    available_moves.remove(move)\n",
        "    move = move - 1\n",
        "    row= move // 3\n",
        "    col = move % 3\n",
        "    return row, col"
      ],
      "metadata": {
        "id": "3OoXELD4YCcL"
      },
      "execution_count": 89,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def game_loop():\n",
        "    available_moves = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "\n",
        "    players=['X', '0']\n",
        "    user = choice(players)\n",
        "\n",
        "    while True:\n",
        "        #X\n",
        "        print_board()\n",
        "        row, col = get_row_and_col(available_moves, user == '0')\n",
        "        board[row][col] ='X'\n",
        "        #Check if player X won or made a draw\n",
        "        state = check_state()\n",
        "        if state != 'Running':\n",
        "            print_board()\n",
        "            break\n",
        "        #0\n",
        "        print_board()\n",
        "        row, col = get_row_and_col(available_moves, user == 'X')\n",
        "        board[row][col]='0'\n",
        "        #Check if player 0 won or made a draw\n",
        "        state = check_state()\n",
        "        if state != 'Running':\n",
        "            print_board()\n",
        "            break\n",
        "    print(state)"
      ],
      "metadata": {
        "id": "duPA_dgRaPRm"
      },
      "execution_count": 90,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "board = [\n",
        "     [' ', ' ', ' '],\n",
        "     [' ', ' ', ' '],\n",
        "     [' ', ' ', ' ']\n",
        "]\n",
        "game_loop()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GFArEwqDcGr1",
        "outputId": "c0898f85-4b86-4297-8291-1c86afad3687"
      },
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "   |   |   \n",
            "---+---+---\n",
            "   |   |   \n",
            "---+---+---\n",
            "   |   |   \n",
            "\n",
            "Choose a move from [1, 2, 3, 4, 5, 6, 7, 8, 9]: 5\n",
            "\n",
            "   |   |   \n",
            "---+---+---\n",
            "   | X |   \n",
            "---+---+---\n",
            "   |   |   \n",
            "\n",
            "\n",
            " 0 |   |   \n",
            "---+---+---\n",
            "   | X |   \n",
            "---+---+---\n",
            "   |   |   \n",
            "\n",
            "Choose a move from [2, 3, 4, 6, 7, 8, 9]: 7\n",
            "\n",
            " 0 |   |   \n",
            "---+---+---\n",
            "   | X |   \n",
            "---+---+---\n",
            " X |   |   \n",
            "\n",
            "\n",
            " 0 |   |   \n",
            "---+---+---\n",
            " 0 | X |   \n",
            "---+---+---\n",
            " X |   |   \n",
            "\n",
            "Choose a move from [2, 3, 6, 8, 9]: 3\n",
            "\n",
            " 0 |   | X \n",
            "---+---+---\n",
            " 0 | X |   \n",
            "---+---+---\n",
            " X |   |   \n",
            "\n",
            "X won!\n"
          ]
        }
      ]
    }
  ]
}